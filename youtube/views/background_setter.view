#import "common.view"

$view.showFilter = $page.model.filter && 1;

widget(container_y, {
	widget(container_x, {
		//height: $ui.height * 5/6;
		widget(dummy, { .width = 2; });

		widget(keyintercept, {
			bind($page.model.filter);
			.enabled = $page.model.canFilter;
      
			widget(container_y, {
				.filterConstraintX = true;
	
				widget(expander_y, {
					.filterConstraintX = true;
	  
					widget(container_x, {
						widget(backdrop, {
							.filterConstraintX = true;
							.color = [0.3, 0.3, 0.3];
							PLATE_GFX();
							widget(container_x, {
		
								widget(label, {
									.caption = "Filter: ";
								});
		
								widget(label, {
									.caption = $page.model.filter;
								});
      						});
						});
					});
				});

	
				widget(array, {
					$view.sizer = int(getWidth() / 100);

					&clone.focused = focusedChild();

					$page.model.metadata.background = $clone.focused.metadata.icon;

					.id = "array";
					.border = $view.sizer * 3;
					.Xspacing = $view.sizer;
					.Yspacing = $view.sizer;
					.childTilesX = 6;
					.childTilesY = 3;
	  
					cloner($page.model.actions, displacement, {
						.focusable = true;
						.focusOnClick = true;
						.padding = $view.sizer * -1.5 * iir(isHovered() || isFocused(), 3) + $view.sizer * iir(isPressed(), 3);
						
						onEvent(activate,
							translate($self.type, void,
								"pageevent", deliverEvent($page.eventSink, $self.data),
								"navopen", navOpen($self.data)
						));
						widget(container_y, {
							.spacing = 5;
							widget(detachable, {
								widget(container_y, {
									align: top;
									widget(backdrop, {
									alphaSelf: 0.5*iir(0.6 + (isFocused() || isPressed() || isHovered()), 4);
										source: "img/tile.png";
										border: 8;
										margin: -4;
										padding: 10;
										widget(image, {
											//width: $ui.width / 10;
											.color = 0.5 + isHovered() * 0.4 + isFocused() * 0.4 + isPressed() * 0.4;
											.source = $self.metadata.icon ?? "img/nophoto.jpg";
											.alpha = 0.7 + 0.3 * isFocused();
										});
									});
								});
							});

							widget(label, {
								//.color = 0.3 + isHovered() * 0.4 + isFocused() * 0.4 + isPressed() * 0.4;
								.color = 0.7;
								.caption = $self.metadata.title;
								.align = center;
								.ellipsize = true;
								.shadow = true;

								.filterConstraintX = true;
								.sizeScale = 1.1 + 0.3* isFocused();
								.bold = isFocused();
								.outline = true;
								.shadow = true;
							});
						});
					});
				});	  
			});
		});

		widget(dummy, { .width = 2; });
		LIST_Y_SLIDER("array");
		widget(dummy, { .width = 2; });
	});
});